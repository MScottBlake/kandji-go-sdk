/*
Kandji API

<html><head></head><body><h1 id=&quot;welcome-to-the-kandji-api-documentation&quot;>Welcome to the Kandji API Documentation</h1> <p>You can find your API URL in Settings &gt; Access. The API URL will follow the below formats.</p> <ul> <li><p>US - <code>https://SubDomain.api.kandji.io</code></p> </li> <li><p>EU - <code>https://SubDomain.api.eu.kandji.io</code></p> </li> </ul> <p>For information on how to obtain an API token, please refer to the following support article.</p> <p><a href=&quot;https://support.kandji.io/api&quot;>https://support.kandji.io/api</a></p> <h4 id=&quot;rate-limit&quot;>Rate Limit</h4> <p>The Kandji API currently has an API rate limit of 10,000 requests per hour per customer.</p> <h4 id=&quot;request-methods&quot;>Request Methods</h4> <p>HTTP request methods supported by the Kandji API.</p> <div class=&quot;click-to-expand-wrapper is-table-wrapper&quot;><table> <thead> <tr> <th>Method</th> <th>Definition</th> </tr> </thead> <tbody> <tr> <td>GET</td> <td>The <code>GET</code> method requests a representation of the specified resource.</td> </tr> <tr> <td>POST</td> <td>The <code>POST</code> method submits an entity to the specified resource.</td> </tr> <tr> <td>PATCH</td> <td>The <code>PATCH</code> method applies partial modifications to a resource.</td> </tr> <tr> <td>DELETE</td> <td>The <code>DELETE</code> method deletes the specified resource.</td> </tr> </tbody> </table> </div><h4 id=&quot;response-codes&quot;>Response codes</h4> <p>Not all response codes apply to every endpoint.</p> <div class=&quot;click-to-expand-wrapper is-table-wrapper&quot;><table> <thead> <tr> <th>Code</th> <th>Response</th> </tr> </thead> <tbody> <tr> <td>200</td> <td>OK</td> </tr> <tr> <td>201</td> <td>Created</td> </tr> <tr> <td>204</td> <td>No content</td> </tr> <tr> <td></td> <td>Typical response when sending the DELETE method.</td> </tr> <tr> <td>400</td> <td>Bad Request</td> </tr> <tr> <td></td> <td>&quot;Command already running&quot; - The command may already be running in a <em>Pending</em> state waiting on the device.</td> </tr> <tr> <td></td> <td>&quot;Command is not allowed for current device&quot; - The command may not be compatible with the target device.</td> </tr> <tr> <td></td> <td>&quot;JSON parse error - Expecting ',' delimiter: line 3 column 2 (char 65)&quot;</td> </tr> <tr> <td>401</td> <td>Unauthorized</td> </tr> <tr> <td></td> <td>This error can occur if the token is incorrect, was revoked, or the token has expired.</td> </tr> <tr> <td>403</td> <td>Forbidden</td> </tr> <tr> <td></td> <td>The request was understood but cannot be authorized.</td> </tr> <tr> <td>404</td> <td>Not found</td> </tr> <tr> <td></td> <td>Unable to locate the resource in the Kandji tenant.</td> </tr> <tr> <td>415</td> <td>Unsupported Media Type</td> </tr> <tr> <td></td> <td>The request contains a media type which the server or resource does not support.</td> </tr> <tr> <td>500</td> <td>Internal server error</td> </tr> <tr> <td>503</td> <td>Service unavailable</td> </tr> <tr> <td></td> <td>This error can occur if a file upload is still being processed via the custom apps API.</td> </tr> </tbody> </table> </div><h4 id=&quot;data-structure&quot;>Data structure</h4> <p>The API returns all structured responses in JSON schema format.</p> <h4 id=&quot;examples&quot;>Examples</h4> <p>Code examples using the API can be found in the Kandji support <a href=&quot;https://github.com/kandji-inc/support/tree/main/api-tools&quot;>GitHub</a>.</p> </body></html>

API version: 1.0.0
Contact: mitchelsblake@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kandji

import (
	"encoding/json"
)

// checks if the UsersGetUser200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersGetUser200Response{}

// UsersGetUser200Response struct for UsersGetUser200Response
type UsersGetUser200Response struct {
	Active *int32 `json:"active,omitempty"`
	Archived *int32 `json:"archived,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Department interface{} `json:"department,omitempty"`
	DeprecatedUserId *string `json:"deprecated_user_id,omitempty"`
	DeviceCount *int32 `json:"device_count,omitempty"`
	Email *string `json:"email,omitempty"`
	Id *string `json:"id,omitempty"`
	Integration *UsersGetUser200ResponseIntegration `json:"integration,omitempty"`
	JobTitle interface{} `json:"job_title,omitempty"`
	Name *string `json:"name,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UsersGetUser200Response UsersGetUser200Response

// NewUsersGetUser200Response instantiates a new UsersGetUser200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersGetUser200Response() *UsersGetUser200Response {
	this := UsersGetUser200Response{}
	return &this
}

// NewUsersGetUser200ResponseWithDefaults instantiates a new UsersGetUser200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersGetUser200ResponseWithDefaults() *UsersGetUser200Response {
	this := UsersGetUser200Response{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *UsersGetUser200Response) GetActive() int32 {
	if o == nil || IsNil(o.Active) {
		var ret int32
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersGetUser200Response) GetActiveOk() (*int32, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *UsersGetUser200Response) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given int32 and assigns it to the Active field.
func (o *UsersGetUser200Response) SetActive(v int32) {
	o.Active = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *UsersGetUser200Response) GetArchived() int32 {
	if o == nil || IsNil(o.Archived) {
		var ret int32
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersGetUser200Response) GetArchivedOk() (*int32, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *UsersGetUser200Response) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given int32 and assigns it to the Archived field.
func (o *UsersGetUser200Response) SetArchived(v int32) {
	o.Archived = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *UsersGetUser200Response) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersGetUser200Response) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *UsersGetUser200Response) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *UsersGetUser200Response) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersGetUser200Response) GetDepartment() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersGetUser200Response) GetDepartmentOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return &o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *UsersGetUser200Response) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given interface{} and assigns it to the Department field.
func (o *UsersGetUser200Response) SetDepartment(v interface{}) {
	o.Department = v
}

// GetDeprecatedUserId returns the DeprecatedUserId field value if set, zero value otherwise.
func (o *UsersGetUser200Response) GetDeprecatedUserId() string {
	if o == nil || IsNil(o.DeprecatedUserId) {
		var ret string
		return ret
	}
	return *o.DeprecatedUserId
}

// GetDeprecatedUserIdOk returns a tuple with the DeprecatedUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersGetUser200Response) GetDeprecatedUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeprecatedUserId) {
		return nil, false
	}
	return o.DeprecatedUserId, true
}

// HasDeprecatedUserId returns a boolean if a field has been set.
func (o *UsersGetUser200Response) HasDeprecatedUserId() bool {
	if o != nil && !IsNil(o.DeprecatedUserId) {
		return true
	}

	return false
}

// SetDeprecatedUserId gets a reference to the given string and assigns it to the DeprecatedUserId field.
func (o *UsersGetUser200Response) SetDeprecatedUserId(v string) {
	o.DeprecatedUserId = &v
}

// GetDeviceCount returns the DeviceCount field value if set, zero value otherwise.
func (o *UsersGetUser200Response) GetDeviceCount() int32 {
	if o == nil || IsNil(o.DeviceCount) {
		var ret int32
		return ret
	}
	return *o.DeviceCount
}

// GetDeviceCountOk returns a tuple with the DeviceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersGetUser200Response) GetDeviceCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DeviceCount) {
		return nil, false
	}
	return o.DeviceCount, true
}

// HasDeviceCount returns a boolean if a field has been set.
func (o *UsersGetUser200Response) HasDeviceCount() bool {
	if o != nil && !IsNil(o.DeviceCount) {
		return true
	}

	return false
}

// SetDeviceCount gets a reference to the given int32 and assigns it to the DeviceCount field.
func (o *UsersGetUser200Response) SetDeviceCount(v int32) {
	o.DeviceCount = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UsersGetUser200Response) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersGetUser200Response) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UsersGetUser200Response) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UsersGetUser200Response) SetEmail(v string) {
	o.Email = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UsersGetUser200Response) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersGetUser200Response) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UsersGetUser200Response) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UsersGetUser200Response) SetId(v string) {
	o.Id = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *UsersGetUser200Response) GetIntegration() UsersGetUser200ResponseIntegration {
	if o == nil || IsNil(o.Integration) {
		var ret UsersGetUser200ResponseIntegration
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersGetUser200Response) GetIntegrationOk() (*UsersGetUser200ResponseIntegration, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *UsersGetUser200Response) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given UsersGetUser200ResponseIntegration and assigns it to the Integration field.
func (o *UsersGetUser200Response) SetIntegration(v UsersGetUser200ResponseIntegration) {
	o.Integration = &v
}

// GetJobTitle returns the JobTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersGetUser200Response) GetJobTitle() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.JobTitle
}

// GetJobTitleOk returns a tuple with the JobTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersGetUser200Response) GetJobTitleOk() (*interface{}, bool) {
	if o == nil || IsNil(o.JobTitle) {
		return nil, false
	}
	return &o.JobTitle, true
}

// HasJobTitle returns a boolean if a field has been set.
func (o *UsersGetUser200Response) HasJobTitle() bool {
	if o != nil && !IsNil(o.JobTitle) {
		return true
	}

	return false
}

// SetJobTitle gets a reference to the given interface{} and assigns it to the JobTitle field.
func (o *UsersGetUser200Response) SetJobTitle(v interface{}) {
	o.JobTitle = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UsersGetUser200Response) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersGetUser200Response) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UsersGetUser200Response) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UsersGetUser200Response) SetName(v string) {
	o.Name = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UsersGetUser200Response) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersGetUser200Response) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UsersGetUser200Response) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *UsersGetUser200Response) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o UsersGetUser200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersGetUser200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Department != nil {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.DeprecatedUserId) {
		toSerialize["deprecated_user_id"] = o.DeprecatedUserId
	}
	if !IsNil(o.DeviceCount) {
		toSerialize["device_count"] = o.DeviceCount
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if o.JobTitle != nil {
		toSerialize["job_title"] = o.JobTitle
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UsersGetUser200Response) UnmarshalJSON(data []byte) (err error) {
	varUsersGetUser200Response := _UsersGetUser200Response{}

	err = json.Unmarshal(data, &varUsersGetUser200Response)

	if err != nil {
		return err
	}

	*o = UsersGetUser200Response(varUsersGetUser200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "active")
		delete(additionalProperties, "archived")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "department")
		delete(additionalProperties, "deprecated_user_id")
		delete(additionalProperties, "device_count")
		delete(additionalProperties, "email")
		delete(additionalProperties, "id")
		delete(additionalProperties, "integration")
		delete(additionalProperties, "job_title")
		delete(additionalProperties, "name")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUsersGetUser200Response struct {
	value *UsersGetUser200Response
	isSet bool
}

func (v NullableUsersGetUser200Response) Get() *UsersGetUser200Response {
	return v.value
}

func (v *NullableUsersGetUser200Response) Set(val *UsersGetUser200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersGetUser200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersGetUser200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersGetUser200Response(val *UsersGetUser200Response) *NullableUsersGetUser200Response {
	return &NullableUsersGetUser200Response{value: val, isSet: true}
}

func (v NullableUsersGetUser200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersGetUser200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


