/*
Kandji API

Testing BlueprintsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kandji_go_sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/MScottBlake/kandji-go-sdk"
)

func Test_kandji_go_sdk_BlueprintsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BlueprintsAPIService AssignLibraryItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		resp, httpRes, err := apiClient.BlueprintsAPI.AssignLibraryItem(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlueprintsAPIService CreateBlueprint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlueprintsAPI.CreateBlueprint(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlueprintsAPIService DeleteBlueprint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		httpRes, err := apiClient.BlueprintsAPI.DeleteBlueprint(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlueprintsAPIService GetBlueprint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		httpRes, err := apiClient.BlueprintsAPI.GetBlueprint(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlueprintsAPIService GetBlueprintTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.BlueprintsAPI.GetBlueprintTemplates(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlueprintsAPIService GetManualEnrollmentProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		resp, httpRes, err := apiClient.BlueprintsAPI.GetManualEnrollmentProfile(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlueprintsAPIService ListBlueprints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlueprintsAPI.ListBlueprints(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlueprintsAPIService ListLibraryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		resp, httpRes, err := apiClient.BlueprintsAPI.ListLibraryItems(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlueprintsAPIService RemoveLibraryItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		resp, httpRes, err := apiClient.BlueprintsAPI.RemoveLibraryItem(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlueprintsAPIService UpdateBlueprint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		resp, httpRes, err := apiClient.BlueprintsAPI.UpdateBlueprint(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
