/*
Kandji API

<html><head></head><body><h1 id=&quot;welcome-to-the-kandji-api-documentation&quot;>Welcome to the Kandji API Documentation</h1> <p>You can find your API URL in Settings &gt; Access. The API URL will follow the below formats.</p> <ul> <li><p>US - <code>https://SubDomain.api.kandji.io</code></p> </li> <li><p>EU - <code>https://SubDomain.api.eu.kandji.io</code></p> </li> </ul> <p>For information on how to obtain an API token, please refer to the following support article.</p> <p><a href=&quot;https://support.kandji.io/api&quot;>https://support.kandji.io/api</a></p> <h4 id=&quot;rate-limit&quot;>Rate Limit</h4> <p>The Kandji API currently has an API rate limit of 10,000 requests per hour per customer.</p> <h4 id=&quot;request-methods&quot;>Request Methods</h4> <p>HTTP request methods supported by the Kandji API.</p> <div class=&quot;click-to-expand-wrapper is-table-wrapper&quot;><table> <thead> <tr> <th>Method</th> <th>Definition</th> </tr> </thead> <tbody> <tr> <td>GET</td> <td>The <code>GET</code> method requests a representation of the specified resource.</td> </tr> <tr> <td>POST</td> <td>The <code>POST</code> method submits an entity to the specified resource.</td> </tr> <tr> <td>PATCH</td> <td>The <code>PATCH</code> method applies partial modifications to a resource.</td> </tr> <tr> <td>DELETE</td> <td>The <code>DELETE</code> method deletes the specified resource.</td> </tr> </tbody> </table> </div><h4 id=&quot;response-codes&quot;>Response codes</h4> <p>Not all response codes apply to every endpoint.</p> <div class=&quot;click-to-expand-wrapper is-table-wrapper&quot;><table> <thead> <tr> <th>Code</th> <th>Response</th> </tr> </thead> <tbody> <tr> <td>200</td> <td>OK</td> </tr> <tr> <td>201</td> <td>Created</td> </tr> <tr> <td>204</td> <td>No content</td> </tr> <tr> <td></td> <td>Typical response when sending the DELETE method.</td> </tr> <tr> <td>400</td> <td>Bad Request</td> </tr> <tr> <td></td> <td>&quot;Command already running&quot; - The command may already be running in a <em>Pending</em> state waiting on the device.</td> </tr> <tr> <td></td> <td>&quot;Command is not allowed for current device&quot; - The command may not be compatible with the target device.</td> </tr> <tr> <td></td> <td>&quot;JSON parse error - Expecting ',' delimiter: line 3 column 2 (char 65)&quot;</td> </tr> <tr> <td>401</td> <td>Unauthorized</td> </tr> <tr> <td></td> <td>This error can occur if the token is incorrect, was revoked, or the token has expired.</td> </tr> <tr> <td>403</td> <td>Forbidden</td> </tr> <tr> <td></td> <td>The request was understood but cannot be authorized.</td> </tr> <tr> <td>404</td> <td>Not found</td> </tr> <tr> <td></td> <td>Unable to locate the resource in the Kandji tenant.</td> </tr> <tr> <td>415</td> <td>Unsupported Media Type</td> </tr> <tr> <td></td> <td>The request contains a media type which the server or resource does not support.</td> </tr> <tr> <td>500</td> <td>Internal server error</td> </tr> <tr> <td>503</td> <td>Service unavailable</td> </tr> <tr> <td></td> <td>This error can occur if a file upload is still being processed via the custom apps API.</td> </tr> </tbody> </table> </div><h4 id=&quot;data-structure&quot;>Data structure</h4> <p>The API returns all structured responses in JSON schema format.</p> <h4 id=&quot;examples&quot;>Examples</h4> <p>Code examples using the API can be found in the Kandji support <a href=&quot;https://github.com/kandji-inc/support/tree/main/api-tools&quot;>GitHub</a>.</p> </body></html>

API version: 1.0.0
Contact: mitchelsblake@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kandji

import (
	"encoding/json"
)

// checks if the DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager{}

// DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager struct for DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager
type DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager struct {
	Color *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	DeviceAssignedBy *string `json:"device_assigned_by,omitempty"`
	DeviceAssignedDate *string `json:"device_assigned_date,omitempty"`
	DeviceFamily *string `json:"device_family,omitempty"`
	Model *string `json:"model,omitempty"`
	Os *string `json:"os,omitempty"`
	SerialNumber *string `json:"serial_number,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager

// NewDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager instantiates a new DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager() *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager {
	this := DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager{}
	return &this
}

// NewDeviceInformationGetDeviceDetails200ResponseAppleBusinessManagerWithDefaults instantiates a new DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceInformationGetDeviceDetails200ResponseAppleBusinessManagerWithDefaults() *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager {
	this := DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) SetColor(v string) {
	o.Color = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) SetDescription(v string) {
	o.Description = &v
}

// GetDeviceAssignedBy returns the DeviceAssignedBy field value if set, zero value otherwise.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetDeviceAssignedBy() string {
	if o == nil || IsNil(o.DeviceAssignedBy) {
		var ret string
		return ret
	}
	return *o.DeviceAssignedBy
}

// GetDeviceAssignedByOk returns a tuple with the DeviceAssignedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetDeviceAssignedByOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceAssignedBy) {
		return nil, false
	}
	return o.DeviceAssignedBy, true
}

// HasDeviceAssignedBy returns a boolean if a field has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) HasDeviceAssignedBy() bool {
	if o != nil && !IsNil(o.DeviceAssignedBy) {
		return true
	}

	return false
}

// SetDeviceAssignedBy gets a reference to the given string and assigns it to the DeviceAssignedBy field.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) SetDeviceAssignedBy(v string) {
	o.DeviceAssignedBy = &v
}

// GetDeviceAssignedDate returns the DeviceAssignedDate field value if set, zero value otherwise.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetDeviceAssignedDate() string {
	if o == nil || IsNil(o.DeviceAssignedDate) {
		var ret string
		return ret
	}
	return *o.DeviceAssignedDate
}

// GetDeviceAssignedDateOk returns a tuple with the DeviceAssignedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetDeviceAssignedDateOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceAssignedDate) {
		return nil, false
	}
	return o.DeviceAssignedDate, true
}

// HasDeviceAssignedDate returns a boolean if a field has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) HasDeviceAssignedDate() bool {
	if o != nil && !IsNil(o.DeviceAssignedDate) {
		return true
	}

	return false
}

// SetDeviceAssignedDate gets a reference to the given string and assigns it to the DeviceAssignedDate field.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) SetDeviceAssignedDate(v string) {
	o.DeviceAssignedDate = &v
}

// GetDeviceFamily returns the DeviceFamily field value if set, zero value otherwise.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetDeviceFamily() string {
	if o == nil || IsNil(o.DeviceFamily) {
		var ret string
		return ret
	}
	return *o.DeviceFamily
}

// GetDeviceFamilyOk returns a tuple with the DeviceFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetDeviceFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceFamily) {
		return nil, false
	}
	return o.DeviceFamily, true
}

// HasDeviceFamily returns a boolean if a field has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) HasDeviceFamily() bool {
	if o != nil && !IsNil(o.DeviceFamily) {
		return true
	}

	return false
}

// SetDeviceFamily gets a reference to the given string and assigns it to the DeviceFamily field.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) SetDeviceFamily(v string) {
	o.DeviceFamily = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) SetModel(v string) {
	o.Model = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetOs() string {
	if o == nil || IsNil(o.Os) {
		var ret string
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetOsOk() (*string, bool) {
	if o == nil || IsNil(o.Os) {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) HasOs() bool {
	if o != nil && !IsNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given string and assigns it to the Os field.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) SetOs(v string) {
	o.Os = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

func (o DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DeviceAssignedBy) {
		toSerialize["device_assigned_by"] = o.DeviceAssignedBy
	}
	if !IsNil(o.DeviceAssignedDate) {
		toSerialize["device_assigned_date"] = o.DeviceAssignedDate
	}
	if !IsNil(o.DeviceFamily) {
		toSerialize["device_family"] = o.DeviceFamily
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Os) {
		toSerialize["os"] = o.Os
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serial_number"] = o.SerialNumber
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) UnmarshalJSON(data []byte) (err error) {
	varDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager := _DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager{}

	err = json.Unmarshal(data, &varDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager)

	if err != nil {
		return err
	}

	*o = DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager(varDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "color")
		delete(additionalProperties, "description")
		delete(additionalProperties, "device_assigned_by")
		delete(additionalProperties, "device_assigned_date")
		delete(additionalProperties, "device_family")
		delete(additionalProperties, "model")
		delete(additionalProperties, "os")
		delete(additionalProperties, "serial_number")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager struct {
	value *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager
	isSet bool
}

func (v NullableDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) Get() *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager {
	return v.value
}

func (v *NullableDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) Set(val *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager(val *DeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) *NullableDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager {
	return &NullableDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager{value: val, isSet: true}
}

func (v NullableDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceInformationGetDeviceDetails200ResponseAppleBusinessManager) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


