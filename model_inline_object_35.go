/*
Kandji API

<html><head></head><body><h1 id=&quot;welcome-to-the-kandji-api-documentation&quot;>Welcome to the Kandji API Documentation</h1> <p>You can find your API URL in Settings &gt; Access. The API URL will follow the below formats.</p> <ul> <li><p>US - <code>https://SubDomain.api.kandji.io</code></p> </li> <li><p>EU - <code>https://SubDomain.api.eu.kandji.io</code></p> </li> </ul> <p>For information on how to obtain an API token, please refer to the following support article.</p> <p><a href=&quot;https://support.kandji.io/api&quot;>https://support.kandji.io/api</a></p> <h4 id=&quot;rate-limit&quot;>Rate Limit</h4> <p>The Kandji API currently has an API rate limit of 10,000 requests per hour per customer.</p> <h4 id=&quot;request-methods&quot;>Request Methods</h4> <p>HTTP request methods supported by the Kandji API.</p> <div class=&quot;click-to-expand-wrapper is-table-wrapper&quot;><table> <thead> <tr> <th>Method</th> <th>Definition</th> </tr> </thead> <tbody> <tr> <td>GET</td> <td>The <code>GET</code> method requests a representation of the specified resource.</td> </tr> <tr> <td>POST</td> <td>The <code>POST</code> method submits an entity to the specified resource.</td> </tr> <tr> <td>PATCH</td> <td>The <code>PATCH</code> method applies partial modifications to a resource.</td> </tr> <tr> <td>DELETE</td> <td>The <code>DELETE</code> method deletes the specified resource.</td> </tr> </tbody> </table> </div><h4 id=&quot;response-codes&quot;>Response codes</h4> <p>Not all response codes apply to every endpoint.</p> <div class=&quot;click-to-expand-wrapper is-table-wrapper&quot;><table> <thead> <tr> <th>Code</th> <th>Response</th> </tr> </thead> <tbody> <tr> <td>200</td> <td>OK</td> </tr> <tr> <td>201</td> <td>Created</td> </tr> <tr> <td>204</td> <td>No content</td> </tr> <tr> <td></td> <td>Typical response when sending the DELETE method.</td> </tr> <tr> <td>400</td> <td>Bad Request</td> </tr> <tr> <td></td> <td>&quot;Command already running&quot; - The command may already be running in a <em>Pending</em> state waiting on the device.</td> </tr> <tr> <td></td> <td>&quot;Command is not allowed for current device&quot; - The command may not be compatible with the target device.</td> </tr> <tr> <td></td> <td>&quot;JSON parse error - Expecting ',' delimiter: line 3 column 2 (char 65)&quot;</td> </tr> <tr> <td>401</td> <td>Unauthorized</td> </tr> <tr> <td></td> <td>This error can occur if the token is incorrect, was revoked, or the token has expired.</td> </tr> <tr> <td>403</td> <td>Forbidden</td> </tr> <tr> <td></td> <td>The request was understood but cannot be authorized.</td> </tr> <tr> <td>404</td> <td>Not found</td> </tr> <tr> <td></td> <td>Unable to locate the resource in the Kandji tenant.</td> </tr> <tr> <td>415</td> <td>Unsupported Media Type</td> </tr> <tr> <td></td> <td>The request contains a media type which the server or resource does not support.</td> </tr> <tr> <td>500</td> <td>Internal server error</td> </tr> <tr> <td>503</td> <td>Service unavailable</td> </tr> <tr> <td></td> <td>This error can occur if a file upload is still being processed via the custom apps API.</td> </tr> </tbody> </table> </div><h4 id=&quot;data-structure&quot;>Data structure</h4> <p>The API returns all structured responses in JSON schema format.</p> <h4 id=&quot;examples&quot;>Examples</h4> <p>Code examples using the API can be found in the Kandji support <a href=&quot;https://github.com/kandji-inc/support/tree/main/api-tools&quot;>GitHub</a>.</p> </body></html>

API version: 1.0.0
Contact: mitchelsblake@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kandji

import (
	"encoding/json"
)

// checks if the InlineObject35 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineObject35{}

// InlineObject35 struct for InlineObject35
type InlineObject35 struct {
	CveId *string `json:"cve_id,omitempty"`
	CveDescription *string `json:"cve_description,omitempty"`
	CveLink *string `json:"cve_link,omitempty"`
	CvssScore *float32 `json:"cvss_score,omitempty"`
	KevScore *int32 `json:"kev_score,omitempty"`
	CvssSeverity *string `json:"cvss_severity,omitempty"`
	CvePublishedOn *string `json:"cve_published_on,omitempty"`
	CveUpdatedOn *string `json:"cve_updated_on,omitempty"`
	DevicesImpacted *int32 `json:"devices_impacted,omitempty"`
	FirstDetectionDate *string `json:"first_detection_date,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InlineObject35 InlineObject35

// NewInlineObject35 instantiates a new InlineObject35 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject35() *InlineObject35 {
	this := InlineObject35{}
	return &this
}

// NewInlineObject35WithDefaults instantiates a new InlineObject35 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject35WithDefaults() *InlineObject35 {
	this := InlineObject35{}
	return &this
}

// GetCveId returns the CveId field value if set, zero value otherwise.
func (o *InlineObject35) GetCveId() string {
	if o == nil || IsNil(o.CveId) {
		var ret string
		return ret
	}
	return *o.CveId
}

// GetCveIdOk returns a tuple with the CveId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject35) GetCveIdOk() (*string, bool) {
	if o == nil || IsNil(o.CveId) {
		return nil, false
	}
	return o.CveId, true
}

// HasCveId returns a boolean if a field has been set.
func (o *InlineObject35) HasCveId() bool {
	if o != nil && !IsNil(o.CveId) {
		return true
	}

	return false
}

// SetCveId gets a reference to the given string and assigns it to the CveId field.
func (o *InlineObject35) SetCveId(v string) {
	o.CveId = &v
}

// GetCveDescription returns the CveDescription field value if set, zero value otherwise.
func (o *InlineObject35) GetCveDescription() string {
	if o == nil || IsNil(o.CveDescription) {
		var ret string
		return ret
	}
	return *o.CveDescription
}

// GetCveDescriptionOk returns a tuple with the CveDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject35) GetCveDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.CveDescription) {
		return nil, false
	}
	return o.CveDescription, true
}

// HasCveDescription returns a boolean if a field has been set.
func (o *InlineObject35) HasCveDescription() bool {
	if o != nil && !IsNil(o.CveDescription) {
		return true
	}

	return false
}

// SetCveDescription gets a reference to the given string and assigns it to the CveDescription field.
func (o *InlineObject35) SetCveDescription(v string) {
	o.CveDescription = &v
}

// GetCveLink returns the CveLink field value if set, zero value otherwise.
func (o *InlineObject35) GetCveLink() string {
	if o == nil || IsNil(o.CveLink) {
		var ret string
		return ret
	}
	return *o.CveLink
}

// GetCveLinkOk returns a tuple with the CveLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject35) GetCveLinkOk() (*string, bool) {
	if o == nil || IsNil(o.CveLink) {
		return nil, false
	}
	return o.CveLink, true
}

// HasCveLink returns a boolean if a field has been set.
func (o *InlineObject35) HasCveLink() bool {
	if o != nil && !IsNil(o.CveLink) {
		return true
	}

	return false
}

// SetCveLink gets a reference to the given string and assigns it to the CveLink field.
func (o *InlineObject35) SetCveLink(v string) {
	o.CveLink = &v
}

// GetCvssScore returns the CvssScore field value if set, zero value otherwise.
func (o *InlineObject35) GetCvssScore() float32 {
	if o == nil || IsNil(o.CvssScore) {
		var ret float32
		return ret
	}
	return *o.CvssScore
}

// GetCvssScoreOk returns a tuple with the CvssScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject35) GetCvssScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.CvssScore) {
		return nil, false
	}
	return o.CvssScore, true
}

// HasCvssScore returns a boolean if a field has been set.
func (o *InlineObject35) HasCvssScore() bool {
	if o != nil && !IsNil(o.CvssScore) {
		return true
	}

	return false
}

// SetCvssScore gets a reference to the given float32 and assigns it to the CvssScore field.
func (o *InlineObject35) SetCvssScore(v float32) {
	o.CvssScore = &v
}

// GetKevScore returns the KevScore field value if set, zero value otherwise.
func (o *InlineObject35) GetKevScore() int32 {
	if o == nil || IsNil(o.KevScore) {
		var ret int32
		return ret
	}
	return *o.KevScore
}

// GetKevScoreOk returns a tuple with the KevScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject35) GetKevScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.KevScore) {
		return nil, false
	}
	return o.KevScore, true
}

// HasKevScore returns a boolean if a field has been set.
func (o *InlineObject35) HasKevScore() bool {
	if o != nil && !IsNil(o.KevScore) {
		return true
	}

	return false
}

// SetKevScore gets a reference to the given int32 and assigns it to the KevScore field.
func (o *InlineObject35) SetKevScore(v int32) {
	o.KevScore = &v
}

// GetCvssSeverity returns the CvssSeverity field value if set, zero value otherwise.
func (o *InlineObject35) GetCvssSeverity() string {
	if o == nil || IsNil(o.CvssSeverity) {
		var ret string
		return ret
	}
	return *o.CvssSeverity
}

// GetCvssSeverityOk returns a tuple with the CvssSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject35) GetCvssSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.CvssSeverity) {
		return nil, false
	}
	return o.CvssSeverity, true
}

// HasCvssSeverity returns a boolean if a field has been set.
func (o *InlineObject35) HasCvssSeverity() bool {
	if o != nil && !IsNil(o.CvssSeverity) {
		return true
	}

	return false
}

// SetCvssSeverity gets a reference to the given string and assigns it to the CvssSeverity field.
func (o *InlineObject35) SetCvssSeverity(v string) {
	o.CvssSeverity = &v
}

// GetCvePublishedOn returns the CvePublishedOn field value if set, zero value otherwise.
func (o *InlineObject35) GetCvePublishedOn() string {
	if o == nil || IsNil(o.CvePublishedOn) {
		var ret string
		return ret
	}
	return *o.CvePublishedOn
}

// GetCvePublishedOnOk returns a tuple with the CvePublishedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject35) GetCvePublishedOnOk() (*string, bool) {
	if o == nil || IsNil(o.CvePublishedOn) {
		return nil, false
	}
	return o.CvePublishedOn, true
}

// HasCvePublishedOn returns a boolean if a field has been set.
func (o *InlineObject35) HasCvePublishedOn() bool {
	if o != nil && !IsNil(o.CvePublishedOn) {
		return true
	}

	return false
}

// SetCvePublishedOn gets a reference to the given string and assigns it to the CvePublishedOn field.
func (o *InlineObject35) SetCvePublishedOn(v string) {
	o.CvePublishedOn = &v
}

// GetCveUpdatedOn returns the CveUpdatedOn field value if set, zero value otherwise.
func (o *InlineObject35) GetCveUpdatedOn() string {
	if o == nil || IsNil(o.CveUpdatedOn) {
		var ret string
		return ret
	}
	return *o.CveUpdatedOn
}

// GetCveUpdatedOnOk returns a tuple with the CveUpdatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject35) GetCveUpdatedOnOk() (*string, bool) {
	if o == nil || IsNil(o.CveUpdatedOn) {
		return nil, false
	}
	return o.CveUpdatedOn, true
}

// HasCveUpdatedOn returns a boolean if a field has been set.
func (o *InlineObject35) HasCveUpdatedOn() bool {
	if o != nil && !IsNil(o.CveUpdatedOn) {
		return true
	}

	return false
}

// SetCveUpdatedOn gets a reference to the given string and assigns it to the CveUpdatedOn field.
func (o *InlineObject35) SetCveUpdatedOn(v string) {
	o.CveUpdatedOn = &v
}

// GetDevicesImpacted returns the DevicesImpacted field value if set, zero value otherwise.
func (o *InlineObject35) GetDevicesImpacted() int32 {
	if o == nil || IsNil(o.DevicesImpacted) {
		var ret int32
		return ret
	}
	return *o.DevicesImpacted
}

// GetDevicesImpactedOk returns a tuple with the DevicesImpacted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject35) GetDevicesImpactedOk() (*int32, bool) {
	if o == nil || IsNil(o.DevicesImpacted) {
		return nil, false
	}
	return o.DevicesImpacted, true
}

// HasDevicesImpacted returns a boolean if a field has been set.
func (o *InlineObject35) HasDevicesImpacted() bool {
	if o != nil && !IsNil(o.DevicesImpacted) {
		return true
	}

	return false
}

// SetDevicesImpacted gets a reference to the given int32 and assigns it to the DevicesImpacted field.
func (o *InlineObject35) SetDevicesImpacted(v int32) {
	o.DevicesImpacted = &v
}

// GetFirstDetectionDate returns the FirstDetectionDate field value if set, zero value otherwise.
func (o *InlineObject35) GetFirstDetectionDate() string {
	if o == nil || IsNil(o.FirstDetectionDate) {
		var ret string
		return ret
	}
	return *o.FirstDetectionDate
}

// GetFirstDetectionDateOk returns a tuple with the FirstDetectionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject35) GetFirstDetectionDateOk() (*string, bool) {
	if o == nil || IsNil(o.FirstDetectionDate) {
		return nil, false
	}
	return o.FirstDetectionDate, true
}

// HasFirstDetectionDate returns a boolean if a field has been set.
func (o *InlineObject35) HasFirstDetectionDate() bool {
	if o != nil && !IsNil(o.FirstDetectionDate) {
		return true
	}

	return false
}

// SetFirstDetectionDate gets a reference to the given string and assigns it to the FirstDetectionDate field.
func (o *InlineObject35) SetFirstDetectionDate(v string) {
	o.FirstDetectionDate = &v
}

func (o InlineObject35) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineObject35) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CveId) {
		toSerialize["cve_id"] = o.CveId
	}
	if !IsNil(o.CveDescription) {
		toSerialize["cve_description"] = o.CveDescription
	}
	if !IsNil(o.CveLink) {
		toSerialize["cve_link"] = o.CveLink
	}
	if !IsNil(o.CvssScore) {
		toSerialize["cvss_score"] = o.CvssScore
	}
	if !IsNil(o.KevScore) {
		toSerialize["kev_score"] = o.KevScore
	}
	if !IsNil(o.CvssSeverity) {
		toSerialize["cvss_severity"] = o.CvssSeverity
	}
	if !IsNil(o.CvePublishedOn) {
		toSerialize["cve_published_on"] = o.CvePublishedOn
	}
	if !IsNil(o.CveUpdatedOn) {
		toSerialize["cve_updated_on"] = o.CveUpdatedOn
	}
	if !IsNil(o.DevicesImpacted) {
		toSerialize["devices_impacted"] = o.DevicesImpacted
	}
	if !IsNil(o.FirstDetectionDate) {
		toSerialize["first_detection_date"] = o.FirstDetectionDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InlineObject35) UnmarshalJSON(data []byte) (err error) {
	varInlineObject35 := _InlineObject35{}

	err = json.Unmarshal(data, &varInlineObject35)

	if err != nil {
		return err
	}

	*o = InlineObject35(varInlineObject35)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cve_id")
		delete(additionalProperties, "cve_description")
		delete(additionalProperties, "cve_link")
		delete(additionalProperties, "cvss_score")
		delete(additionalProperties, "kev_score")
		delete(additionalProperties, "cvss_severity")
		delete(additionalProperties, "cve_published_on")
		delete(additionalProperties, "cve_updated_on")
		delete(additionalProperties, "devices_impacted")
		delete(additionalProperties, "first_detection_date")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInlineObject35 struct {
	value *InlineObject35
	isSet bool
}

func (v NullableInlineObject35) Get() *InlineObject35 {
	return v.value
}

func (v *NullableInlineObject35) Set(val *InlineObject35) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject35) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject35) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject35(val *InlineObject35) *NullableInlineObject35 {
	return &NullableInlineObject35{value: val, isSet: true}
}

func (v NullableInlineObject35) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject35) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


