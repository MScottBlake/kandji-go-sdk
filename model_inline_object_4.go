/*
Kandji API

<html><head></head><body><h1 id=&quot;welcome-to-the-kandji-api-documentation&quot;>Welcome to the Kandji API Documentation</h1> <p>You can find your API URL in Settings &gt; Access. The API URL will follow the below formats.</p> <ul> <li><p>US - <code>https://SubDomain.api.kandji.io</code></p> </li> <li><p>EU - <code>https://SubDomain.api.eu.kandji.io</code></p> </li> </ul> <p>For information on how to obtain an API token, please refer to the following support article.</p> <p><a href=&quot;https://support.kandji.io/api&quot;>https://support.kandji.io/api</a></p> <h4 id=&quot;rate-limit&quot;>Rate Limit</h4> <p>The Kandji API currently has an API rate limit of 10,000 requests per hour per customer.</p> <h4 id=&quot;request-methods&quot;>Request Methods</h4> <p>HTTP request methods supported by the Kandji API.</p> <div class=&quot;click-to-expand-wrapper is-table-wrapper&quot;><table> <thead> <tr> <th>Method</th> <th>Definition</th> </tr> </thead> <tbody> <tr> <td>GET</td> <td>The <code>GET</code> method requests a representation of the specified resource.</td> </tr> <tr> <td>POST</td> <td>The <code>POST</code> method submits an entity to the specified resource.</td> </tr> <tr> <td>PATCH</td> <td>The <code>PATCH</code> method applies partial modifications to a resource.</td> </tr> <tr> <td>DELETE</td> <td>The <code>DELETE</code> method deletes the specified resource.</td> </tr> </tbody> </table> </div><h4 id=&quot;response-codes&quot;>Response codes</h4> <p>Not all response codes apply to every endpoint.</p> <div class=&quot;click-to-expand-wrapper is-table-wrapper&quot;><table> <thead> <tr> <th>Code</th> <th>Response</th> </tr> </thead> <tbody> <tr> <td>200</td> <td>OK</td> </tr> <tr> <td>201</td> <td>Created</td> </tr> <tr> <td>204</td> <td>No content</td> </tr> <tr> <td></td> <td>Typical response when sending the DELETE method.</td> </tr> <tr> <td>400</td> <td>Bad Request</td> </tr> <tr> <td></td> <td>&quot;Command already running&quot; - The command may already be running in a <em>Pending</em> state waiting on the device.</td> </tr> <tr> <td></td> <td>&quot;Command is not allowed for current device&quot; - The command may not be compatible with the target device.</td> </tr> <tr> <td></td> <td>&quot;JSON parse error - Expecting ',' delimiter: line 3 column 2 (char 65)&quot;</td> </tr> <tr> <td>401</td> <td>Unauthorized</td> </tr> <tr> <td></td> <td>This error can occur if the token is incorrect, was revoked, or the token has expired.</td> </tr> <tr> <td>403</td> <td>Forbidden</td> </tr> <tr> <td></td> <td>The request was understood but cannot be authorized.</td> </tr> <tr> <td>404</td> <td>Not found</td> </tr> <tr> <td></td> <td>Unable to locate the resource in the Kandji tenant.</td> </tr> <tr> <td>415</td> <td>Unsupported Media Type</td> </tr> <tr> <td></td> <td>The request contains a media type which the server or resource does not support.</td> </tr> <tr> <td>500</td> <td>Internal server error</td> </tr> <tr> <td>503</td> <td>Service unavailable</td> </tr> <tr> <td></td> <td>This error can occur if a file upload is still being processed via the custom apps API.</td> </tr> </tbody> </table> </div><h4 id=&quot;data-structure&quot;>Data structure</h4> <p>The API returns all structured responses in JSON schema format.</p> <h4 id=&quot;examples&quot;>Examples</h4> <p>Code examples using the API can be found in the Kandji support <a href=&quot;https://github.com/kandji-inc/support/tree/main/api-tools&quot;>GitHub</a>.</p> </body></html>

API version: 1.0.0
Contact: mitchelsblake@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kandji

import (
	"encoding/json"
)

// checks if the InlineObject4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineObject4{}

// InlineObject4 struct for InlineObject4
type InlineObject4 struct {
	BlueprintId *string `json:"blueprint_id,omitempty"`
	MdmDevice *InlineObject4MdmDevice `json:"mdm_device,omitempty"`
	UserId *string `json:"user_id,omitempty"`
	DepAccount *InlineObject4DepAccount `json:"dep_account,omitempty"`
	AssetTag *string `json:"asset_tag,omitempty"`
	Color *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	DeviceAssignedBy *string `json:"device_assigned_by,omitempty"`
	DeviceAssignedDate *string `json:"device_assigned_date,omitempty"`
	DeviceFamily *string `json:"device_family,omitempty"`
	Model *string `json:"model,omitempty"`
	Os *string `json:"os,omitempty"`
	ProfileAssignTime *string `json:"profile_assign_time,omitempty"`
	ProfilePushTime *string `json:"profile_push_time,omitempty"`
	ProfileStatus *string `json:"profile_status,omitempty"`
	SerialNumber *string `json:"serial_number,omitempty"`
	Id *string `json:"id,omitempty"`
	LastAssignmentStatus *string `json:"last_assignment_status,omitempty"`
	FailedAssignmentAttempts *int32 `json:"failed_assignment_attempts,omitempty"`
	AssignmentStatusReceivedAt *string `json:"assignment_status_received_at,omitempty"`
	Blueprint *string `json:"blueprint,omitempty"`
	User *string `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InlineObject4 InlineObject4

// NewInlineObject4 instantiates a new InlineObject4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject4() *InlineObject4 {
	this := InlineObject4{}
	return &this
}

// NewInlineObject4WithDefaults instantiates a new InlineObject4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject4WithDefaults() *InlineObject4 {
	this := InlineObject4{}
	return &this
}

// GetBlueprintId returns the BlueprintId field value if set, zero value otherwise.
func (o *InlineObject4) GetBlueprintId() string {
	if o == nil || IsNil(o.BlueprintId) {
		var ret string
		return ret
	}
	return *o.BlueprintId
}

// GetBlueprintIdOk returns a tuple with the BlueprintId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetBlueprintIdOk() (*string, bool) {
	if o == nil || IsNil(o.BlueprintId) {
		return nil, false
	}
	return o.BlueprintId, true
}

// HasBlueprintId returns a boolean if a field has been set.
func (o *InlineObject4) HasBlueprintId() bool {
	if o != nil && !IsNil(o.BlueprintId) {
		return true
	}

	return false
}

// SetBlueprintId gets a reference to the given string and assigns it to the BlueprintId field.
func (o *InlineObject4) SetBlueprintId(v string) {
	o.BlueprintId = &v
}

// GetMdmDevice returns the MdmDevice field value if set, zero value otherwise.
func (o *InlineObject4) GetMdmDevice() InlineObject4MdmDevice {
	if o == nil || IsNil(o.MdmDevice) {
		var ret InlineObject4MdmDevice
		return ret
	}
	return *o.MdmDevice
}

// GetMdmDeviceOk returns a tuple with the MdmDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetMdmDeviceOk() (*InlineObject4MdmDevice, bool) {
	if o == nil || IsNil(o.MdmDevice) {
		return nil, false
	}
	return o.MdmDevice, true
}

// HasMdmDevice returns a boolean if a field has been set.
func (o *InlineObject4) HasMdmDevice() bool {
	if o != nil && !IsNil(o.MdmDevice) {
		return true
	}

	return false
}

// SetMdmDevice gets a reference to the given InlineObject4MdmDevice and assigns it to the MdmDevice field.
func (o *InlineObject4) SetMdmDevice(v InlineObject4MdmDevice) {
	o.MdmDevice = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *InlineObject4) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *InlineObject4) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *InlineObject4) SetUserId(v string) {
	o.UserId = &v
}

// GetDepAccount returns the DepAccount field value if set, zero value otherwise.
func (o *InlineObject4) GetDepAccount() InlineObject4DepAccount {
	if o == nil || IsNil(o.DepAccount) {
		var ret InlineObject4DepAccount
		return ret
	}
	return *o.DepAccount
}

// GetDepAccountOk returns a tuple with the DepAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetDepAccountOk() (*InlineObject4DepAccount, bool) {
	if o == nil || IsNil(o.DepAccount) {
		return nil, false
	}
	return o.DepAccount, true
}

// HasDepAccount returns a boolean if a field has been set.
func (o *InlineObject4) HasDepAccount() bool {
	if o != nil && !IsNil(o.DepAccount) {
		return true
	}

	return false
}

// SetDepAccount gets a reference to the given InlineObject4DepAccount and assigns it to the DepAccount field.
func (o *InlineObject4) SetDepAccount(v InlineObject4DepAccount) {
	o.DepAccount = &v
}

// GetAssetTag returns the AssetTag field value if set, zero value otherwise.
func (o *InlineObject4) GetAssetTag() string {
	if o == nil || IsNil(o.AssetTag) {
		var ret string
		return ret
	}
	return *o.AssetTag
}

// GetAssetTagOk returns a tuple with the AssetTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetAssetTagOk() (*string, bool) {
	if o == nil || IsNil(o.AssetTag) {
		return nil, false
	}
	return o.AssetTag, true
}

// HasAssetTag returns a boolean if a field has been set.
func (o *InlineObject4) HasAssetTag() bool {
	if o != nil && !IsNil(o.AssetTag) {
		return true
	}

	return false
}

// SetAssetTag gets a reference to the given string and assigns it to the AssetTag field.
func (o *InlineObject4) SetAssetTag(v string) {
	o.AssetTag = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *InlineObject4) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *InlineObject4) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *InlineObject4) SetColor(v string) {
	o.Color = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InlineObject4) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InlineObject4) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InlineObject4) SetDescription(v string) {
	o.Description = &v
}

// GetDeviceAssignedBy returns the DeviceAssignedBy field value if set, zero value otherwise.
func (o *InlineObject4) GetDeviceAssignedBy() string {
	if o == nil || IsNil(o.DeviceAssignedBy) {
		var ret string
		return ret
	}
	return *o.DeviceAssignedBy
}

// GetDeviceAssignedByOk returns a tuple with the DeviceAssignedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetDeviceAssignedByOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceAssignedBy) {
		return nil, false
	}
	return o.DeviceAssignedBy, true
}

// HasDeviceAssignedBy returns a boolean if a field has been set.
func (o *InlineObject4) HasDeviceAssignedBy() bool {
	if o != nil && !IsNil(o.DeviceAssignedBy) {
		return true
	}

	return false
}

// SetDeviceAssignedBy gets a reference to the given string and assigns it to the DeviceAssignedBy field.
func (o *InlineObject4) SetDeviceAssignedBy(v string) {
	o.DeviceAssignedBy = &v
}

// GetDeviceAssignedDate returns the DeviceAssignedDate field value if set, zero value otherwise.
func (o *InlineObject4) GetDeviceAssignedDate() string {
	if o == nil || IsNil(o.DeviceAssignedDate) {
		var ret string
		return ret
	}
	return *o.DeviceAssignedDate
}

// GetDeviceAssignedDateOk returns a tuple with the DeviceAssignedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetDeviceAssignedDateOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceAssignedDate) {
		return nil, false
	}
	return o.DeviceAssignedDate, true
}

// HasDeviceAssignedDate returns a boolean if a field has been set.
func (o *InlineObject4) HasDeviceAssignedDate() bool {
	if o != nil && !IsNil(o.DeviceAssignedDate) {
		return true
	}

	return false
}

// SetDeviceAssignedDate gets a reference to the given string and assigns it to the DeviceAssignedDate field.
func (o *InlineObject4) SetDeviceAssignedDate(v string) {
	o.DeviceAssignedDate = &v
}

// GetDeviceFamily returns the DeviceFamily field value if set, zero value otherwise.
func (o *InlineObject4) GetDeviceFamily() string {
	if o == nil || IsNil(o.DeviceFamily) {
		var ret string
		return ret
	}
	return *o.DeviceFamily
}

// GetDeviceFamilyOk returns a tuple with the DeviceFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetDeviceFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceFamily) {
		return nil, false
	}
	return o.DeviceFamily, true
}

// HasDeviceFamily returns a boolean if a field has been set.
func (o *InlineObject4) HasDeviceFamily() bool {
	if o != nil && !IsNil(o.DeviceFamily) {
		return true
	}

	return false
}

// SetDeviceFamily gets a reference to the given string and assigns it to the DeviceFamily field.
func (o *InlineObject4) SetDeviceFamily(v string) {
	o.DeviceFamily = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *InlineObject4) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *InlineObject4) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *InlineObject4) SetModel(v string) {
	o.Model = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *InlineObject4) GetOs() string {
	if o == nil || IsNil(o.Os) {
		var ret string
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetOsOk() (*string, bool) {
	if o == nil || IsNil(o.Os) {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *InlineObject4) HasOs() bool {
	if o != nil && !IsNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given string and assigns it to the Os field.
func (o *InlineObject4) SetOs(v string) {
	o.Os = &v
}

// GetProfileAssignTime returns the ProfileAssignTime field value if set, zero value otherwise.
func (o *InlineObject4) GetProfileAssignTime() string {
	if o == nil || IsNil(o.ProfileAssignTime) {
		var ret string
		return ret
	}
	return *o.ProfileAssignTime
}

// GetProfileAssignTimeOk returns a tuple with the ProfileAssignTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetProfileAssignTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileAssignTime) {
		return nil, false
	}
	return o.ProfileAssignTime, true
}

// HasProfileAssignTime returns a boolean if a field has been set.
func (o *InlineObject4) HasProfileAssignTime() bool {
	if o != nil && !IsNil(o.ProfileAssignTime) {
		return true
	}

	return false
}

// SetProfileAssignTime gets a reference to the given string and assigns it to the ProfileAssignTime field.
func (o *InlineObject4) SetProfileAssignTime(v string) {
	o.ProfileAssignTime = &v
}

// GetProfilePushTime returns the ProfilePushTime field value if set, zero value otherwise.
func (o *InlineObject4) GetProfilePushTime() string {
	if o == nil || IsNil(o.ProfilePushTime) {
		var ret string
		return ret
	}
	return *o.ProfilePushTime
}

// GetProfilePushTimeOk returns a tuple with the ProfilePushTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetProfilePushTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ProfilePushTime) {
		return nil, false
	}
	return o.ProfilePushTime, true
}

// HasProfilePushTime returns a boolean if a field has been set.
func (o *InlineObject4) HasProfilePushTime() bool {
	if o != nil && !IsNil(o.ProfilePushTime) {
		return true
	}

	return false
}

// SetProfilePushTime gets a reference to the given string and assigns it to the ProfilePushTime field.
func (o *InlineObject4) SetProfilePushTime(v string) {
	o.ProfilePushTime = &v
}

// GetProfileStatus returns the ProfileStatus field value if set, zero value otherwise.
func (o *InlineObject4) GetProfileStatus() string {
	if o == nil || IsNil(o.ProfileStatus) {
		var ret string
		return ret
	}
	return *o.ProfileStatus
}

// GetProfileStatusOk returns a tuple with the ProfileStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetProfileStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileStatus) {
		return nil, false
	}
	return o.ProfileStatus, true
}

// HasProfileStatus returns a boolean if a field has been set.
func (o *InlineObject4) HasProfileStatus() bool {
	if o != nil && !IsNil(o.ProfileStatus) {
		return true
	}

	return false
}

// SetProfileStatus gets a reference to the given string and assigns it to the ProfileStatus field.
func (o *InlineObject4) SetProfileStatus(v string) {
	o.ProfileStatus = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *InlineObject4) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *InlineObject4) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *InlineObject4) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InlineObject4) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InlineObject4) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InlineObject4) SetId(v string) {
	o.Id = &v
}

// GetLastAssignmentStatus returns the LastAssignmentStatus field value if set, zero value otherwise.
func (o *InlineObject4) GetLastAssignmentStatus() string {
	if o == nil || IsNil(o.LastAssignmentStatus) {
		var ret string
		return ret
	}
	return *o.LastAssignmentStatus
}

// GetLastAssignmentStatusOk returns a tuple with the LastAssignmentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetLastAssignmentStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LastAssignmentStatus) {
		return nil, false
	}
	return o.LastAssignmentStatus, true
}

// HasLastAssignmentStatus returns a boolean if a field has been set.
func (o *InlineObject4) HasLastAssignmentStatus() bool {
	if o != nil && !IsNil(o.LastAssignmentStatus) {
		return true
	}

	return false
}

// SetLastAssignmentStatus gets a reference to the given string and assigns it to the LastAssignmentStatus field.
func (o *InlineObject4) SetLastAssignmentStatus(v string) {
	o.LastAssignmentStatus = &v
}

// GetFailedAssignmentAttempts returns the FailedAssignmentAttempts field value if set, zero value otherwise.
func (o *InlineObject4) GetFailedAssignmentAttempts() int32 {
	if o == nil || IsNil(o.FailedAssignmentAttempts) {
		var ret int32
		return ret
	}
	return *o.FailedAssignmentAttempts
}

// GetFailedAssignmentAttemptsOk returns a tuple with the FailedAssignmentAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetFailedAssignmentAttemptsOk() (*int32, bool) {
	if o == nil || IsNil(o.FailedAssignmentAttempts) {
		return nil, false
	}
	return o.FailedAssignmentAttempts, true
}

// HasFailedAssignmentAttempts returns a boolean if a field has been set.
func (o *InlineObject4) HasFailedAssignmentAttempts() bool {
	if o != nil && !IsNil(o.FailedAssignmentAttempts) {
		return true
	}

	return false
}

// SetFailedAssignmentAttempts gets a reference to the given int32 and assigns it to the FailedAssignmentAttempts field.
func (o *InlineObject4) SetFailedAssignmentAttempts(v int32) {
	o.FailedAssignmentAttempts = &v
}

// GetAssignmentStatusReceivedAt returns the AssignmentStatusReceivedAt field value if set, zero value otherwise.
func (o *InlineObject4) GetAssignmentStatusReceivedAt() string {
	if o == nil || IsNil(o.AssignmentStatusReceivedAt) {
		var ret string
		return ret
	}
	return *o.AssignmentStatusReceivedAt
}

// GetAssignmentStatusReceivedAtOk returns a tuple with the AssignmentStatusReceivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetAssignmentStatusReceivedAtOk() (*string, bool) {
	if o == nil || IsNil(o.AssignmentStatusReceivedAt) {
		return nil, false
	}
	return o.AssignmentStatusReceivedAt, true
}

// HasAssignmentStatusReceivedAt returns a boolean if a field has been set.
func (o *InlineObject4) HasAssignmentStatusReceivedAt() bool {
	if o != nil && !IsNil(o.AssignmentStatusReceivedAt) {
		return true
	}

	return false
}

// SetAssignmentStatusReceivedAt gets a reference to the given string and assigns it to the AssignmentStatusReceivedAt field.
func (o *InlineObject4) SetAssignmentStatusReceivedAt(v string) {
	o.AssignmentStatusReceivedAt = &v
}

// GetBlueprint returns the Blueprint field value if set, zero value otherwise.
func (o *InlineObject4) GetBlueprint() string {
	if o == nil || IsNil(o.Blueprint) {
		var ret string
		return ret
	}
	return *o.Blueprint
}

// GetBlueprintOk returns a tuple with the Blueprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetBlueprintOk() (*string, bool) {
	if o == nil || IsNil(o.Blueprint) {
		return nil, false
	}
	return o.Blueprint, true
}

// HasBlueprint returns a boolean if a field has been set.
func (o *InlineObject4) HasBlueprint() bool {
	if o != nil && !IsNil(o.Blueprint) {
		return true
	}

	return false
}

// SetBlueprint gets a reference to the given string and assigns it to the Blueprint field.
func (o *InlineObject4) SetBlueprint(v string) {
	o.Blueprint = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *InlineObject4) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject4) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *InlineObject4) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *InlineObject4) SetUser(v string) {
	o.User = &v
}

func (o InlineObject4) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineObject4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlueprintId) {
		toSerialize["blueprint_id"] = o.BlueprintId
	}
	if !IsNil(o.MdmDevice) {
		toSerialize["mdm_device"] = o.MdmDevice
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.DepAccount) {
		toSerialize["dep_account"] = o.DepAccount
	}
	if !IsNil(o.AssetTag) {
		toSerialize["asset_tag"] = o.AssetTag
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DeviceAssignedBy) {
		toSerialize["device_assigned_by"] = o.DeviceAssignedBy
	}
	if !IsNil(o.DeviceAssignedDate) {
		toSerialize["device_assigned_date"] = o.DeviceAssignedDate
	}
	if !IsNil(o.DeviceFamily) {
		toSerialize["device_family"] = o.DeviceFamily
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Os) {
		toSerialize["os"] = o.Os
	}
	if !IsNil(o.ProfileAssignTime) {
		toSerialize["profile_assign_time"] = o.ProfileAssignTime
	}
	if !IsNil(o.ProfilePushTime) {
		toSerialize["profile_push_time"] = o.ProfilePushTime
	}
	if !IsNil(o.ProfileStatus) {
		toSerialize["profile_status"] = o.ProfileStatus
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serial_number"] = o.SerialNumber
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastAssignmentStatus) {
		toSerialize["last_assignment_status"] = o.LastAssignmentStatus
	}
	if !IsNil(o.FailedAssignmentAttempts) {
		toSerialize["failed_assignment_attempts"] = o.FailedAssignmentAttempts
	}
	if !IsNil(o.AssignmentStatusReceivedAt) {
		toSerialize["assignment_status_received_at"] = o.AssignmentStatusReceivedAt
	}
	if !IsNil(o.Blueprint) {
		toSerialize["blueprint"] = o.Blueprint
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InlineObject4) UnmarshalJSON(data []byte) (err error) {
	varInlineObject4 := _InlineObject4{}

	err = json.Unmarshal(data, &varInlineObject4)

	if err != nil {
		return err
	}

	*o = InlineObject4(varInlineObject4)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "blueprint_id")
		delete(additionalProperties, "mdm_device")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "dep_account")
		delete(additionalProperties, "asset_tag")
		delete(additionalProperties, "color")
		delete(additionalProperties, "description")
		delete(additionalProperties, "device_assigned_by")
		delete(additionalProperties, "device_assigned_date")
		delete(additionalProperties, "device_family")
		delete(additionalProperties, "model")
		delete(additionalProperties, "os")
		delete(additionalProperties, "profile_assign_time")
		delete(additionalProperties, "profile_push_time")
		delete(additionalProperties, "profile_status")
		delete(additionalProperties, "serial_number")
		delete(additionalProperties, "id")
		delete(additionalProperties, "last_assignment_status")
		delete(additionalProperties, "failed_assignment_attempts")
		delete(additionalProperties, "assignment_status_received_at")
		delete(additionalProperties, "blueprint")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInlineObject4 struct {
	value *InlineObject4
	isSet bool
}

func (v NullableInlineObject4) Get() *InlineObject4 {
	return v.value
}

func (v *NullableInlineObject4) Set(val *InlineObject4) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject4) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject4(val *InlineObject4) *NullableInlineObject4 {
	return &NullableInlineObject4{value: val, isSet: true}
}

func (v NullableInlineObject4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


